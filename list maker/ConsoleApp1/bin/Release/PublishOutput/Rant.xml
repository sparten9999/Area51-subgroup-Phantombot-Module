<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rant</name>
    </assembly>
    <members>
        <member name="T:Rant.Core.Compiler.CompileContext">
            <summary>
            Distinguishes execution contexts to the compiler to make it aware of context-specific token behaviors.
            </summary>
        </member>
        <member name="F:Rant.Core.Compiler.CompileContext.DefaultSequence">
            <summary>
            Point of execution is outside of any specialized constructs.
            </summary>
        </member>
        <member name="F:Rant.Core.Compiler.CompileContext.ArgumentSequence">
            <summary>
            Point of execution is inside a tag argument.
            </summary>
        </member>
        <member name="F:Rant.Core.Compiler.CompileContext.BlockSequence">
            <summary>
            Point of execution is inside of a block.
            </summary>
        </member>
        <member name="F:Rant.Core.Compiler.CompileContext.BlockWeight">
            <summary>
            We're reading a block weight.
            </summary>
        </member>
        <member name="F:Rant.Core.Compiler.CompileContext.SubroutineBody">
            <summary>
            We're reading a subroutine body.
            </summary>
        </member>
        <member name="F:Rant.Core.Compiler.CompileContext.BlockEndSequence">
            <summary>
            The end of a block.
            </summary>
        </member>
        <member name="F:Rant.Core.Compiler.CompileContext.FunctionEndContext">
            <summary>
            The end of function arguments.
            </summary>
        </member>
        <member name="F:Rant.Core.Compiler.CompileContext.QueryComplement">
            <summary>
            Complement pattern for queries.
            </summary>
        </member>
        <member name="T:Rant.Core.Compiler.Syntax.RstBlock">
            <summary>
            Represents a block construct, which provides multiple options to the interpreter for the next sequence, one of which is
            chosen.
            </summary>
        </member>
        <member name="T:Rant.Core.Compiler.Syntax.RST">
            <summary>
            Represents a Rant Syntax Tree (RST) node for a Rant pattern. This is the base class for all Rant actions.
            </summary>
        </member>
        <member name="M:Rant.Core.Compiler.Syntax.RST.Run(Rant.Core.Sandbox)">
            <summary>
            Performs the operations defined in the RST, given a specific sandbox to operate upon.
            </summary>
            <param name="sb">The sandbox on which to operate.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Core.Compiler.Syntax.RstReplacer">
            <summary>
            Replaces text in a pattern output according to a regular expression and evaluator pattern.
            </summary>
        </member>
        <member name="T:Rant.Core.Compiler.Syntax.RstSequence">
            <summary>
            Performs a sequence of actions.
            </summary>
        </member>
        <member name="T:Rant.Core.Compiler.Syntax.RstText">
            <summary>
            Prints a string constant to the output.
            </summary>
        </member>
        <member name="P:Rant.Core.Compiler.TokenReader.End">
            <summary>
            Determines whether the reader has reached the end of the token stream.
            </summary>
        </member>
        <member name="P:Rant.Core.Compiler.TokenReader.PrevToken">
            <summary>
            The last token that was read.
            </summary>
        </member>
        <member name="P:Rant.Core.Compiler.TokenReader.PrevLooseToken">
            <summary>
            The last non-whitespace token before the current reader position.
            </summary>
        </member>
        <member name="P:Rant.Core.Compiler.TokenReader.LastNonSpaceType">
            <summary>
            The last non-whitespace token type.
            </summary>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.ReadToken">
            <summary>
            Reads the next available token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.PeekToken">
            <summary>
            Returns the next available token, but does not consume it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.PeekLooseToken">
            <summary>
            Returns the next available non-whitespace token, but does not consume it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.PeekType">
            <summary>
            Returns the type of the next available token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.IsNext(Rant.Core.Compiler.R)">
            <summary>
            Determines whether the next token is of the specified type.
            </summary>
            <param name="type">The type to check for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.Take(Rant.Core.Compiler.R,System.Boolean)">
            <summary>
            Consumes the next token if its type matches the specified type. Returns true if it matches.
            </summary>
            <param name="type">The type to consume.</param>
            <param name="allowEof">Allow end-of-file tokens. Specifying False will throw an exception instead.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.TakeLoose(Rant.Core.Compiler.R,System.Boolean)">
            <summary>
            Consumes the next non-whitespace token if its type matches the specified type. Returns true if it matches.
            </summary>
            <param name="type">The type to consume.</param>
            <param name="allowEof">Allow end-of-file tokens. Specifying False will throw an exception instead.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.TakeAny(Rant.Core.Compiler.R[])">
            <summary>
            Consumes the next token if its type matches any of the specified types. Returns true if a match was found.
            </summary>
            <param name="types">The types to consume.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.TakeAny(Rant.Core.Compiler.R@,Rant.Core.Compiler.R[])">
            <summary>
            Consumes the next token if its type matches any of the specified types, and outputs the matching type. Returns true if
            a match was found.
            </summary>
            <param name="result">The matched type.</param>
            <param name="types">The types to consume.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.TakeAnyLoose(Rant.Core.Compiler.R[])">
            <summary>
            Consumes the next non-whitespace token if its type matches any of the specified types. Returns true if a match was
            found.
            </summary>
            <param name="types">The types to consume.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.TakeAnyLoose(Rant.Core.Compiler.R@,Rant.Core.Compiler.R[])">
            <summary>
            Consumes the next non-whitespace token if its type matches any of the specified types, and outputs the matching type.
            Returns true if a match was found.
            </summary>
            <param name="result">The matched type.</param>
            <param name="types">The types to consume.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.TakeAll(Rant.Core.Compiler.R,System.Boolean)">
            <summary>
            Consumes as many tokens as possible, as long as they match the specified type. Returns true if at least one was found.
            </summary>
            <param name="type">The type to consume.</param>
            <param name="allowEof">Allow end-of-file tokens. Specifying False will throw an exception instead.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.TakeAllLoose(Rant.Core.Compiler.R,System.Boolean)">
            <summary>
            Consumes as many non-whitespace tokens as possible, as long as they match the specified type. Returns true if at least
            one was found.
            </summary>
            <param name="type">The type to consume.</param>
            <param name="allowEof">Allow end-of-file tokens. Specifying False will throw an exception instead.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.Read(Rant.Core.Compiler.R,System.String)">
            <summary>
            Reads and returns the next token if its type matches the specified type.
            If it does not match, a RantCompilerException is thrown with the expected token name.
            </summary>
            <param name="type">The token type to read.</param>
            <param name="expectedTokenName">A display name describing what the token is for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.ReadAny(Rant.Core.Compiler.R[])">
            <summary>
            Reads and returns the next token if its type matches any of the given types
            If it does not match, a RantCompilerException is thrown with the expected token names.
            </summary>
            <param name="types">The token types accepted for the read token.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.ReadLoose(Rant.Core.Compiler.R,System.String)">
            <summary>
            Reads and returns the next non-whitespace token if its type matches the specified type.
            If it does not match, a RantCompilerException is thrown with the expected token name.
            </summary>
            <param name="type">The token type to read.</param>
            <param name="expectedTokenName">A display name describing what the token is for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.TakeSeries(Rant.Core.Compiler.Token[],System.Int32,Rant.Core.Compiler.R[])">
            <summary>
            Reads a series of tokens into a buffer as long as they match the types specified in an array, in the order they appear.
            Returns True if reading was successful.
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset at which to begin writing tokens into the buffer.</param>
            <param name="types">The required types.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.TakeSeriesLoose(Rant.Core.Compiler.Token[],System.Int32,Rant.Core.Compiler.R[])">
            <summary>
            Reads a series of non-whitespace tokens into a buffer as long as they match the types specified in an array, in the
            order they appear. Returns True if reading was successful.
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset at which to begin writing tokens into the buffer.</param>
            <param name="types">The required types.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.ReadLooseToken">
            <summary>
            Reads and returns the next non-whitespace token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.Compiler.TokenReader.TakeAllWhile(System.Func{Rant.Core.Compiler.Token,System.Boolean},System.Boolean)">
            <summary>
            Consumes as many token as possible while they satisfy the specified predicate.
            </summary>
            <param name="predicate">The predicate to test tokens with.</param>
            <param name="allowEof">Allow end-of-file tokens. Specifying False will throw an exception instead.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Core.Constructs.AttribPersistence">
            <summary>
            Defines persistence modes for block attributes.
            </summary>
        </member>
        <member name="F:Rant.Core.Constructs.AttribPersistence.Off">
            <summary>
            The next block consumes attributes immediately.
            </summary>
        </member>
        <member name="F:Rant.Core.Constructs.AttribPersistence.Outer">
            <summary>
            The next block consumes attributes and restores them when finished.
            </summary>
        </member>
        <member name="F:Rant.Core.Constructs.AttribPersistence.OuterShared">
            <summary>
            The next block uses but does not consume attributes.
            They are inherited by and restored at the end of each child block.
            </summary>
        </member>
        <member name="F:Rant.Core.Constructs.AttribPersistence.Inner">
            <summary>
            The current attributes are inherited by all blocks inside the current block.
            They are consumed at the end of the block.
            </summary>
        </member>
        <member name="F:Rant.Core.Constructs.AttribPersistence.InnerShared">
            <summary>
            The current attributes are inherited by all blocks inside the current block, as well as their children.
            They are consumed at the end of the block.
            </summary>
        </member>
        <member name="F:Rant.Core.Constructs.AttribPersistence.ReadOnly">
            <summary>
            Disable changes to the current block attributes until the persistence mode is changed.
            </summary>
        </member>
        <member name="F:Rant.Core.Constructs.AttribPersistence.Once">
            <summary>
            Attributes will persist over the next block, but any block after or inside it will consume them.
            </summary>
        </member>
        <member name="F:Rant.Core.Constructs.AttribPersistence.On">
            <summary>
            The next block uses but does not consume attributes. This also affects child blocks.
            </summary>
        </member>
        <member name="T:Rant.Core.Constructs.BlockState">
            <summary>
            Supplies state information about an active block, such as the iteration, item count, and current index.
            </summary>
        </member>
        <member name="M:Rant.Core.Constructs.BlockAttribs.NextIndex(System.Int32,Rant.RNG)">
            <summary>
            Calculates the index of the next block item to execute.
            </summary>
            <param name="blockItemCount">The number of items in the block.</param>
            <param name="rng">The random number generator to use with index calculation.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Core.Formatting.Emoji">
            <summary>
            A list of emoji.
            I don't know where to put this other than a class, so uh, here you go.
            </summary>
        </member>
        <member name="F:Rant.Core.Formatting.Emoji.Shortcodes">
            <summary>
            Maps Emoji shortcodes to Unicode code points.
            </summary>
        </member>
        <member name="T:Rant.Core.Sandbox">
            <summary>
            Represents a Rant interpreter instance that produces a single output.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.Engine">
            <summary>
            Gets the engine instance to which the sandbox is bound.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.BaseOutput">
            <summary>
            Gets the main output channel stack.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.Output">
            <summary>
            Gets the current output channel stack.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.RNG">
            <summary>
            Gets the random number generator in use by the interpreter.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.StartingGen">
            <summary>
            The starting generation of the RNG.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.Format">
            <summary>
            Gets the format used by the interpreter.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.Objects">
            <summary>
            Gets the object stack used by the interpreter.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.Blocks">
            <summary>
            Gets the block state stack.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.RegexMatches">
            <summary>
            Gets the replacer match stack. The topmost item is the current match for the current replacer.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.CarrierState">
            <summary>
            Gets the current query state.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.Pattern">
            <summary>
            Gets the current RantPattern.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.SubroutineArgs">
            <summary>
            Subroutine argument stack.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.SyncManager">
            <summary>
            Gets the synchronizer manager instance for the current Sandbox.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.SizeLimit">
            <summary>
            Gets the size limit for the pattern.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.CurrentAction">
            <summary>
            Gets the current RantAction being executed.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.LastTimeout">
            <summary>
            Gets the last used timeout.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.FlagConditionExpectedResult">
            <summary>
            Gets or sets the expected result for the current flag condition.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.ConditionFlags">
            <summary>
            Gets a collection of the flags currently being used for the flag condition.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.PatternArgs">
            <summary>
            Gets the arguments passed to the pattern.
            </summary>
        </member>
        <member name="P:Rant.Core.Sandbox.AttribManager">
            <summary>
            The block manager.
            </summary>
        </member>
        <member name="M:Rant.Core.Sandbox.Print(System.Object)">
            <summary>
            Prints the specified value to the output channel stack.
            </summary>
            <param name="obj">The value to print.</param>
        </member>
        <member name="T:Rant.Core.Utilities.Witchcraft">
            <summary>
            Allows creation of Rant function delegates from reflected methods that can be invoked using a series of boxed
            arguments.
            </summary>
        </member>
        <member name="M:Rant.Core.Utilities.Util.IsNullOrWhiteSpace(System.String)">
            <summary>
            Alternative implementation of String.IsNullOrWhitespace for Unity compatability.
            </summary>
            <param name="value">The string to check.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Core.Output.OutputChain">
            <summary>
            Specially designed linked list for storing targets and output buffers, with support for change events for
            auto-formatting functionality.
            </summary>
        </member>
        <member name="T:Rant.Core.Output.ChannelVisibility">
            <summary>
            Provides visibility settings for output channels.
            </summary>
        </member>
        <member name="F:Rant.Core.Output.ChannelVisibility.Public">
            <summary>
            Channel outputs to itself and 'main'.
            </summary>
        </member>
        <member name="F:Rant.Core.Output.ChannelVisibility.Private">
            <summary>
            Channel outputs only to itself.
            </summary>
        </member>
        <member name="F:Rant.Core.Output.ChannelVisibility.Internal">
            <summary>
            Channel outputs only to itself and any parent channels also set to Internal.
            </summary>
        </member>
        <member name="T:Rant.Core.Framework.RantFunctionParameterType">
            <summary>
            Defines parameter types for Rant functions.
            </summary>
        </member>
        <member name="F:Rant.Core.Framework.RantFunctionParameterType.String">
            <summary>
            Parameter is a static string.
            </summary>
        </member>
        <member name="F:Rant.Core.Framework.RantFunctionParameterType.Pattern">
            <summary>
            Parameter is a lazily evaluated pattern.
            </summary>
        </member>
        <member name="F:Rant.Core.Framework.RantFunctionParameterType.Number">
            <summary>
            Parameter is numeric.
            </summary>
        </member>
        <member name="F:Rant.Core.Framework.RantFunctionParameterType.Mode">
            <summary>
            Parameter describes a mode, which is one of a specific set of allowed values.
            </summary>
        </member>
        <member name="F:Rant.Core.Framework.RantFunctionParameterType.Flags">
            <summary>
            Parameter uses combinable flags.
            </summary>
        </member>
        <member name="F:Rant.Core.Framework.RantFunctionParameterType.RantObject">
            <summary>
            Parameter is a RantObject.
            </summary>
        </member>
        <member name="F:Rant.Core.Framework.RantFunctionParameterType.Boolean">
            <summary>
            Parameter is a boolean.
            </summary>
        </member>
        <member name="T:Rant.Core.Framework.RantFunctionSignature">
            <summary>
            Contains information for associating a delegate with a Rant function.
            </summary>
        </member>
        <member name="T:Rant.Core.ObjectModel.ObjectTable">
            <summary>
            Stores global and local variables for a single engine instance.
            </summary>
        </member>
        <member name="T:Rant.Core.ObjectModel.RantObject">
            <summary>
            Represents a Rant variable.
            </summary>
        </member>
        <member name="F:Rant.Core.ObjectModel.RantObject.Null">
            <summary>
            Null
            </summary>
        </member>
        <member name="F:Rant.Core.ObjectModel.RantObject.True">
            <summary>
            True
            </summary>
        </member>
        <member name="F:Rant.Core.ObjectModel.RantObject.False">
            <summary>
            False
            </summary>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.#ctor">
            <summary>
            Creates a null object.
            </summary>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rant.Core.ObjectModel.RantObject"/> class from the specified object.
            </summary>
            <param name="o">The object to store in the <see cref="T:Rant.Core.ObjectModel.RantObject"/> instance.</param>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.#ctor(Rant.Core.ObjectModel.RantObjectType)">
            <summary>
            Creates a new RantObject with the specified object type and a default value.
            </summary>
            <param name="type">The type of object to create.</param>
        </member>
        <member name="P:Rant.Core.ObjectModel.RantObject.Type">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="P:Rant.Core.ObjectModel.RantObject.Value">
            <summary>
            The value of the object.
            </summary>
        </member>
        <member name="P:Rant.Core.ObjectModel.RantObject.Length">
            <summary>
            Gets the length of the object. For strings, this is the character count. For lists, this is the item count. For all other types, -1 is returned.
            </summary>
        </member>
        <member name="P:Rant.Core.ObjectModel.RantObject.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index in the object.
            Only works with list objects.
            </summary>
            <param name="index">The index of the item to access.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.ConvertTo(Rant.Core.ObjectModel.RantObjectType)">
            <summary>
            Converts the current object to a RantObject of the specified type and returns it.
            </summary>
            <param name="targetType">The object type to convert to.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.Clone">
            <summary>
            Returns another RantObject instance with the exact same value as the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.op_LogicalNot(Rant.Core.ObjectModel.RantObject)">
            <summary>
            Gets the boolean inverse of a RantObject.
            </summary>
            <param name="a">The object to invert from.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.op_Addition(Rant.Core.ObjectModel.RantObject,Rant.Core.ObjectModel.RantObject)">
            <summary>
            Returns the sum of two RantObjects.
            </summary>
            <param name="a">The first object.</param>
            <param name="b">The second object.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.op_Subtraction(Rant.Core.ObjectModel.RantObject,Rant.Core.ObjectModel.RantObject)">
            <summary>
            Subtracts a RantObject from another.
            </summary>
            <param name="a">The object to subtract from.</param>
            <param name="b">The object to subtract.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.op_Multiply(Rant.Core.ObjectModel.RantObject,Rant.Core.ObjectModel.RantObject)">
            <summary>
            Returns the product of two RantObjects.
            </summary>
            <param name="a">The first object.</param>
            <param name="b">The second object.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.op_Division(Rant.Core.ObjectModel.RantObject,Rant.Core.ObjectModel.RantObject)">
            <summary>
            Divides one RantObject by another.
            </summary>
            <param name="a">The object to divide.</param>
            <param name="b">The object to divide by.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.op_Modulus(Rant.Core.ObjectModel.RantObject,Rant.Core.ObjectModel.RantObject)">
            <summary>
            Mods one RantObject by another.
            </summary>
            <param name="a">The object to mod.</param>
            <param name="b">The object to mod by.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.ObjectModel.RantObject.ToString">
            <summary>
            Returns a string representation of the current RantObject.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Core.ObjectModel.ObjectStack">
            <summary>
            Stores local variables for a VM instance.
            </summary>
        </member>
        <member name="T:Rant.Core.ObjectModel.RantObjectType">
            <summary>
            Defines object types used by Rant.
            </summary>
        </member>
        <member name="F:Rant.Core.ObjectModel.RantObjectType.Number">
            <summary>
            Represents a decimal number.
            </summary>
        </member>
        <member name="F:Rant.Core.ObjectModel.RantObjectType.String">
            <summary>
            Represents a series of Unicode characters.
            </summary>
        </member>
        <member name="F:Rant.Core.ObjectModel.RantObjectType.Boolean">
            <summary>
            Represents a boolean value.
            </summary>
        </member>
        <member name="F:Rant.Core.ObjectModel.RantObjectType.List">
            <summary>
            Represents a resizable set of values.
            </summary>
        </member>
        <member name="F:Rant.Core.ObjectModel.RantObjectType.Action">
            <summary>
            Represents a VM action.
            </summary>
        </member>
        <member name="F:Rant.Core.ObjectModel.RantObjectType.Subroutine">
            <summary>
            Represents a subroutine.
            </summary>
        </member>
        <member name="F:Rant.Core.ObjectModel.RantObjectType.Null">
            <summary>
            Represents a lack of a value.
            </summary>
        </member>
        <member name="F:Rant.Core.ObjectModel.RantObjectType.Undefined">
            <summary>
            Represents a lack of any variable at all.
            </summary>
        </member>
        <member name="T:Rant.Core.IO.BitField">
            <summary>
            Represents a bit field of arbitrary length.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.BitField.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the Rant.IO.BitField class with the specified number of bits.
            </summary>
            <param name="bits">The number of bits in the bit field. This value must be a multiple of 8.</param>
        </member>
        <member name="P:Rant.Core.IO.BitField.Item(System.Int32)">
            <summary>
            Accesses the bit at the specified index in the bit field.
            </summary>
            <param name="i">The index of the bit to access.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.Core.IO.BitField.Bits">
            <summary>
            The number of bits in the BitField.
            </summary>
        </member>
        <member name="P:Rant.Core.IO.BitField.Bytes">
            <summary>
            The number of bytes in the BitField.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.BitField.FromValue``1(``0)">
            <summary>
            Creates a BitField object from the specified data.
            </summary>
            <typeparam name="T">The type of data to pass.</typeparam>
            <param name="value">The data to pass to the BitField.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.BitField.UnsetAll">
            <summary>
            Unsets all the flags in the bitfield.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.BitField.SetAll">
            <summary>
            Sets all the flags in the bitfield.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.BitField.GetSetCount">
            <summary>
            Returns the number of set bits.
            </summary>
            <returns>The number of set bits.</returns>
        </member>
        <member name="M:Rant.Core.IO.BitField.GetUnsetCount">
            <summary>
            Returns the number of unset bits.
            </summary>
            <returns>The number of unset bits.</returns>
        </member>
        <member name="M:Rant.Core.IO.BitField.Invert">
            <summary>
            Inverts the flags in the bit field.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.BitField.FromBytes(System.Byte[])">
            <summary>
            Creates a new BitField from the specified array of bytes.
            </summary>
            <param name="data">The array of bytes to create the BitField from.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.BitField.GetBytes">
            <summary>
            Returns the BitField as an array of bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Core.IO.EasyReader">
            <summary>
            Provides comprehensive binary data reading functionality including support for reading arrays and enumeration members.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.#ctor(System.IO.Stream,Rant.Core.IO.Endian)">
            <summary>
            Creates a new instance of the Rant.IO.EasyReader class from the specified stream.
            </summary>
            <param name="stream">The stream from which to read.</param>
            <param name="defaultEndianness">The endianness of the data to be read.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.#ctor(System.IO.Stream,System.Boolean,Rant.Core.IO.Endian)">
            <summary>
            Creates a new instance of the Rant.IO.EasyReader class from the specified stream.
            </summary>
            <param name="stream">The stream from which to read.</param>
            <param name="leaveOpen">Specifies whether or not to leave the stream open after the reader is disposed.</param>
            <param name="defaultEndianness">The endianness of the data to be read.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.#ctor(System.String,System.IO.FileMode,System.Int32,Rant.Core.IO.Endian)">
            <summary>
            Creates a new instance of the Rant.IO.EasyReader class from the specified file path.
            </summary>
            <param name="path">The path to the file to read.</param>
            <param name="mode">Speficies how the operating system should open the file.</param>
            <param name="startIndex">The index at which to start reading.</param>
            <param name="defaultEndianness">The endianness of the data to be read.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.#ctor(System.Byte[],System.Int32,Rant.Core.IO.Endian)">
            <summary>
            Creates a new instance of the Rant.IO.EasyReader class from a byte array.
            </summary>
            <param name="data">The byte array to read from.</param>
            <param name="startIndex">The index at which to start reading.</param>
            <param name="defaultEndianness">The endianness of the data to be read.</param>
        </member>
        <member name="P:Rant.Core.IO.EasyReader.Encoding">
            <summary>
            The character encoding for the stream.
            </summary>
        </member>
        <member name="P:Rant.Core.IO.EasyReader.Endianness">
            <summary>
            Gets or sets the endianness in which data is read by the stream.
            </summary>
        </member>
        <member name="P:Rant.Core.IO.EasyReader.EndOfStream">
            <summary>
            Returns true if the stream has reached its end.
            </summary>
        </member>
        <member name="P:Rant.Core.IO.EasyReader.Remaining">
            <summary>
            The amount of bytes that are remaining to be read.
            </summary>
        </member>
        <member name="P:Rant.Core.IO.EasyReader.Length">
            <summary>
            The length of the stream in bytes.
            </summary>
        </member>
        <member name="P:Rant.Core.IO.EasyReader.BaseStream">
            <summary>
            The underlying stream for this instance.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by the current instance of the Rant.IO.EasyReader class.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.Peek">
            <summary>
            Returns the next available byte but does not consume it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadByte">
            <summary>
            Reads a single byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadByte(System.Byte@)">
            <summary>
            Reads a single byte.
            </summary>
            <param name="value">The byte that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadBytes(System.Int32)">
            <summary>
            Reads an array of bytes.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadBytes(System.Int32,System.Byte[]@)">
            <summary>
            Reads an array of bytes.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="value">The bytes that were read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadAllBytes">
            <summary>
            Reads all bytes from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadAllBytes(System.Byte[]@)">
            <summary>
            Reads all bytes from the stream.
            </summary>
            <param name="value">The bytes from the stream.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadSByte">
            <summary>
            Reads a signed byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadSByte(System.SByte@)">
            <summary>
            Reads a signed byte.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadChar">
            <summary>
            Reads a Unicode character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadChar(System.Char@)">
            <summary>
            Reads a Unicode character.
            </summary>
            <param name="value">The character that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadBoolean">
            <summary>
            Reads a 1-byte boolean value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadBoolean(System.Boolean@)">
            <summary>
            Reads a 1-byte boolean value.
            </summary>
            <param name="value">The boolean value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadUInt16">
            <summary>
            Reads a 16-bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadUInt16(System.UInt16@)">
            <summary>
            Reads a 16-bit unsigned integer.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadInt16">
            <summary>
            Reads a 16-bit signed integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadUInt32(System.UInt32@)">
            <summary>
            Reads a 32-bit unsigned integer.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadInt32">
            <summary>
            Reads a 32-bit signed integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadInt32(System.Int32@)">
            <summary>
            Reads a 32-bit signed integer.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadUInt64">
            <summary>
            Reads a 64-bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadUInt64(System.UInt64@)">
            <summary>
            Reads a 64-bit unsigned integer.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadInt64">
            <summary>
            Reads a 64-bit signed integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadInt64(System.Int64@)">
            <summary>
            Reads a 64-bit signed integer.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadSingle">
            <summary>
            Reads a single-precision floating point number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadSingle(System.Single@)">
            <summary>
            Reads a single-precision floating point number.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadDouble">
            <summary>
            Reads a double-precision floating-point number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadDouble(System.Double@)">
            <summary>
            Reads a double-precision floating-point number.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadDecimal">
            <summary>
            Reads a 128-bit decimal number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadDecimal(System.Decimal@)">
            <summary>
            Reads a 128-bit decimal number.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadString">
            <summary>
            Reads a Unicode string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadString(System.String@)">
            <summary>
            Reads a Unicode string.
            </summary>
            <param name="value">The string that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadString(System.Text.Encoding)">
            <summary>
            Reads a string encoded in the specified encoding.
            </summary>
            <param name="encoding">The encoding of the string to be read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadString(System.Text.Encoding,System.String@)">
            <summary>
            Reads a string encoded in the specified encoding.
            </summary>
            <param name="encoding">The encoding of the string to be read.</param>
            <param name="value">The string that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadCString">
            <summary>
            Reads a null-terminated string (C-string).
            </summary>
            <returns>The string that was read.</returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadStringArray">
            <summary>
            Reads an array of Unicode strings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadStringArray(System.String[]@)">
            <summary>
            Reads an array of Unicode strings.
            </summary>
            <param name="value">The array of strings that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadStringArray(System.Text.Encoding)">
            <summary>
            Reads a string array encoded in the specified encoding.
            </summary>
            <param name="encoding">The encoding of the strings to be read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadStringArray(System.Text.Encoding,System.String[]@)">
            <summary>
            Reads a string array encoded in the specified encoding.
            </summary>
            <param name="encoding">The encoding of the strings to be read.</param>
            <param name="value">The array of strings that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadArray``1(System.Boolean)">
            <summary>
            Reads an array of the specified value type.
            </summary>
            <typeparam name="T">The type stored in the array.</typeparam>
            <param name="use64bit">Indicates to the reader that the array length is 64-bit rather than 32-bit.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadArray``1(``0[]@,System.Boolean)">
            <summary>
            Reads an array of the specified value type.
            </summary>
            <typeparam name="T">The type stored in the array.</typeparam>
            <param name="value">The array that was read.</param>
            <param name="use64bit">Indicates to the reader that the array length is 64-bit rather than 32-bit.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadArray``1(System.Int32)">
            <summary>
            Reads an array of the specified type and item count.
            </summary>
            <typeparam name="T">The type stored in the array.</typeparam>
            <param name="length">The length of the array.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadArray``1(System.Int32,``0[]@)">
            <summary>
            Reads an array of the specified type and item count.
            </summary>
            <typeparam name="T">The type stored in the array.</typeparam>
            <param name="length">The length of the array.</param>
            <param name="value">The array that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadDictionary``2">
            <summary>
            Reads a dictionary of the specified key and value types.
            </summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadDictionary``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            Reads a dictionary of the specified key and value types.
            </summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
            <param name="value">The dictionary that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadEnum``1">
            <summary>
            Reads an enumeration member.
            </summary>
            <typeparam name="TEnum">The enumeration type to read.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadEnum``1(``0@)">
            <summary>
            Reads an enumeration member.
            </summary>
            <typeparam name="TEnum">The enumeration type to read.</typeparam>
            <param name="value">The enumeration member that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadStruct``1(System.Boolean)">
            <summary>
            Reads a struct of the specified type.
            </summary>
            <typeparam name="TStruct">The struct to read.</typeparam>
            <param name="convertEndian"></param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadStruct``1(``0@,System.Boolean)">
            <summary>
            Reads a struct of the specified type.
            </summary>
            <typeparam name="TStruct">The struct to read.</typeparam>
            <param name="convertEndian">
            Specifies if struct members marked with the [Endianness(Endian)] attribute should have
            their endianness converted as necessary.
            </param>
            <param name="value">The struct that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadNullable``1">
            <summary>
            Reads a nullable value.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadNullable``1(System.Nullable{``0}@)">
            <summary>
            Reads a nullable value.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="value">The nullable value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadBitField(System.Int32)">
            <summary>
            Reads a bit field from the stream.
            </summary>
            <param name="sizeInBytes">The size of the bit field in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.ReadBitField(System.Int32,Rant.Core.IO.BitField@)">
            <summary>
            Reads a bit field from the stream.
            </summary>
            <param name="sizeInBytes">The size of the bit field in bytes.</param>
            <param name="value">The bit field that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyReader.Close">
            <summary>
            Closes the reader and the underlying stream.
            </summary>
        </member>
        <member name="T:Rant.Core.IO.EasyWriter">
            <summary>
            Provides comprehensive binary writing functionality including support for writing arrays and enumeration members.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the Rant.IO.EasyWriter class from the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.#ctor(System.IO.Stream,Rant.Core.IO.Endian,System.Boolean)">
            <summary>
            Creates a new instance of the Rant.IO.EasyWriter class from the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="endianness">The endianness in which to write data.</param>
            <param name="leaveOpen">Specifies whether or not to leave the stream open after the writer is disposed.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.#ctor(System.String,System.IO.FileMode,Rant.Core.IO.Endian)">
            <summary>
            Creates a new instance of the Rant.IO.EasyWriter class from the specified file path and mode.
            </summary>
            <param name="path">The path to the file to write.</param>
            <param name="endianness">The endianness in which to write data.</param>
            <param name="mode">Specifies how the operating system should open the file.</param>
        </member>
        <member name="P:Rant.Core.IO.EasyWriter.Encoding">
            <summary>
            The character encoding for the stream.
            </summary>
        </member>
        <member name="P:Rant.Core.IO.EasyWriter.BaseStream">
            <summary>
            The underlying stream for this instance.
            </summary>
        </member>
        <member name="P:Rant.Core.IO.EasyWriter.Endianness">
            <summary>
            Gets or sets the endianness in which data is written.
            </summary>
        </member>
        <member name="P:Rant.Core.IO.EasyWriter.Position">
            <summary>
            The current writing position of the stream.
            </summary>
        </member>
        <member name="P:Rant.Core.IO.EasyWriter.Length">
            <summary>
            The current length of the stream.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Dispose">
            <summary>
            Releases all resources used by the current instance of the Rant.IO.EasyWriter class.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.Byte)">
            <summary>
            Writes a byte to the stream.
            </summary>
            <param name="value">The byte to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes a series of bytes to the stream.
            </summary>
            <param name="value">The byte array to write.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.SByte)">
            <summary>
            Writes a signed byte to the stream.
            </summary>
            <param name="value">The signed byte to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.UInt16)">
            <summary>
            Writes a 16-bit unsigned integer to the stream.
            </summary>
            <param name="value">The 16-bit unsigned integer to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.Int16)">
            <summary>
            Writes a 16-bit signed integer to the stream.
            </summary>
            <param name="value">The 16-bit signed integer to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer to the stream.
            </summary>
            <param name="value">The 32-bit unsigned integer to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.Int32)">
            <summary>
            Writes a 32-bit signed integer to the stream.
            </summary>
            <param name="value">The 32-bit signed integer to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.UInt64)">
            <summary>
            Writes a 64-bit unsigned integer to the stream.
            </summary>
            <param name="value">The 64-bit unsigned integer to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.Int64)">
            <summary>
            Writes a 64-bit signed integer to the stream.
            </summary>
            <param name="value">The 64-bit signed integer to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.Single)">
            <summary>
            Writes a single-precision floating-point number to the stream.
            </summary>
            <param name="value">The single-precision floating-point number to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.Double)">
            <summary>
            Writes a double-precision floating-point number to the stream.
            </summary>
            <param name="value">The double-precision floating-point number to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.Char)">
            <summary>
            Writes a character to the stream.
            </summary>
            <param name="value">The character to write.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.Decimal)">
            <summary>
            Writes a 128-bit decimal number to the stream.
            </summary>
            <param name="value">The 128-bit decimal number to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.String,System.Boolean)">
            <summary>
            Writes a Unicode string to the stream.
            </summary>
            <param name="value">The Unicode string to write.</param>
            <param name="nullTerminated">Whether or not the string should be written as a C-string.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes a string of the specified encoding to the stream.
            </summary>
            <param name="value">The string to write to the stream.</param>
            <param name="encoding">The encoding to write the string in.</param>
            <param name="nullTerminated">Specifies whether the string should be null-terminated.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.String[])">
            <summary>
            Writes a Unicode string array to the stream.
            </summary>
            <param name="value">The Unicode string array to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.String[],System.Text.Encoding)">
            <summary>
            Writes a string array of the specified encoding to the stream.
            </summary>
            <param name="value">The string array to write.</param>
            <param name="encoding">The encoding to write the strings in.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.WriteArray``1(``0[],System.Boolean,System.Boolean)">
            <summary>
            Writes an array of values to the stream.
            </summary>
            <typeparam name="T">The type of value stored in the array.</typeparam>
            <param name="array">The array to write.</param>
            <param name="prefixLength">Indices to the writer if the array length should be prefixed to the data.</param>
            <param name="use64bit">Indicates to the writer that the array length is 64-bit rather than 32-bit.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(System.Byte[])">
            <summary>
            Writes the specified byte array to the stream.
            </summary>
            <param name="value">The byte array to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Writes a dictionary of the specified key and value types to the stream.
            </summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
            <param name="value">The dictionary to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write``1(``0,System.Boolean)">
            <summary>
            Writes a struct or enumeration member to the stream.
            </summary>
            <typeparam name="TStruct">The type of the struct or enum.</typeparam>
            <param name="value">The object to write.</param>
            <param name="convertEndian">Indicates to the writer if endianness attributes should be regarded.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write(Rant.Core.IO.BitField)">
            <summary>
            Write a bit field to the stream.
            </summary>
            <param name="value">The bit field to write.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Write``1(System.Nullable{``0})">
            <summary>
            Writes a nullable value to the stream.
            </summary>
            <typeparam name="T">The type of the value to write.</typeparam>
            <param name="value">The nullable value to write.</param>
        </member>
        <member name="M:Rant.Core.IO.EasyWriter.Close">
            <summary>
            Closes the writer and the underlying stream.
            </summary>
        </member>
        <member name="T:Rant.Core.IO.Endian">
            <summary>
            Indicates byte ordering of binary fields.
            </summary>
        </member>
        <member name="F:Rant.Core.IO.Endian.Big">
            <summary>
            Big endian.
            </summary>
        </member>
        <member name="F:Rant.Core.IO.Endian.Little">
            <summary>
            Little endian.
            </summary>
        </member>
        <member name="T:Rant.Core.IO.EndiannessAttribute">
            <summary>
            Specifies the byte order in which a field should be written and read by EasyWriter/EasyReader.
            </summary>
        </member>
        <member name="F:Rant.Core.IO.EndiannessAttribute.Endian">
            <summary>
            The endianness to represent the data in.
            </summary>
        </member>
        <member name="M:Rant.Core.IO.EndiannessAttribute.#ctor(Rant.Core.IO.Endian)">
            <summary>
            Initializes a new instance of the EasyIO.EndiannessAttribute class with the specified endianness.
            </summary>
            <param name="endianness">The endianness to represent the field data in.</param>
        </member>
        <member name="M:Rant.Core.IO.IOUtil.ConvertEndian(System.Byte[],Rant.Core.IO.Endian)">
            <summary>
            Converts the endianness of a series of bytes according to the endianness of the data. This process works both for
            system-side and data-side conversions.
            </summary>
            <param name="data">The data to convert.</param>
            <param name="dataEndianness">The endianness to convert to or from.</param>
        </member>
        <member name="T:Rant.Formats.EnglishNumberVerbalizer">
            <summary>
            Represents a number verbalizer for English (US).
            </summary>
        </member>
        <member name="M:Rant.Formats.EnglishNumberVerbalizer.Verbalize(System.Int64)">
            <summary>
            Verbalizes the specified value.
            </summary>
            <param name="number">The number to verbalize.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Formats.GermanNumberVerbalizer">
            <summary>
            Represents a number verbalizer for Standard German.
            </summary>
        </member>
        <member name="M:Rant.Formats.GermanNumberVerbalizer.Verbalize(System.Int64)">
            <summary>
            Verbalizes the specified value.
            </summary>
            <param name="number">The number to verbalize.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Formats.NumberVerbalizer">
            <summary>
            The base class for all number verbalizers.
            </summary>
        </member>
        <member name="M:Rant.Formats.NumberVerbalizer.Verbalize(System.Int64)">
            <summary>
            Verbalizes the specified value.
            </summary>
            <param name="number">The number to verbalize.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Formats.QuotationMarks">
            <summary>
            Represents a configuration for quotation marks.
            </summary>
        </member>
        <member name="M:Rant.Formats.QuotationMarks.#ctor">
            <summary>
            Initializes a new instance of the QuotationFormat class with the default configuration.
            </summary>
        </member>
        <member name="M:Rant.Formats.QuotationMarks.#ctor(System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Initializes a new instance of the QuotationFormat class with the specified quotation marks.
            </summary>
            <param name="openPrimary">The opening primary quote.</param>
            <param name="closePrimary">The closing primary quote.</param>
            <param name="openSecondary">The opening secondary quote.</param>
            <param name="closeSecondary">The closing secondary quote.</param>
        </member>
        <member name="P:Rant.Formats.QuotationMarks.OpeningPrimary">
            <summary>
            The opening primary quotation mark.
            </summary>
        </member>
        <member name="P:Rant.Formats.QuotationMarks.ClosingPrimary">
            <summary>
            The closing primary quotation mark.
            </summary>
        </member>
        <member name="P:Rant.Formats.QuotationMarks.OpeningSecondary">
            <summary>
            The opening secondary quotation mark.
            </summary>
        </member>
        <member name="P:Rant.Formats.QuotationMarks.ClosingSecondary">
            <summary>
            The closing secondary quotation mark.
            </summary>
        </member>
        <member name="M:Rant.Formats.QuotationMarks.ToString">
            <summary>
            Returns a string representation of the configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Formats.WritingSystem">
            <summary>
            Represents configuration settings for a language's writing system.
            </summary>
        </member>
        <member name="M:Rant.Formats.WritingSystem.#ctor(System.Collections.Generic.IEnumerable{System.Char},System.String,Rant.Formats.QuotationMarks)">
            <summary>
            Creates a new writing system with the specified configuration.
            </summary>
            <param name="alphabet">The alphabet to use.</param>
            <param name="space">The standard space to use.</param>
            <param name="quotations">The quotation marks to use.</param>
        </member>
        <member name="M:Rant.Formats.WritingSystem.#ctor">
            <summary>
            Creates a new writing system with the default configuration.
            </summary>
        </member>
        <member name="M:Rant.Formats.WritingSystem.GetAlphabet">
            <summary>
            The alphabet used by the format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rant.Formats.WritingSystem.Quotations">
            <summary>
            The quotation marks used by the format.
            </summary>
        </member>
        <member name="P:Rant.Formats.WritingSystem.Space">
            <summary>
            The standard space used by series and phrasals.
            </summary>
        </member>
        <member name="T:Rant.Formats.EnglishPluralizer">
            <summary>
            Pluralizer for English nouns.
            </summary>
        </member>
        <member name="M:Rant.Formats.EnglishPluralizer.Pluralize(System.String)">
            <summary>
            Determines the plural form of the specified English noun.
            </summary>
            <param name="input">The singular form of the noun to pluralize.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Formats.Pluralizer">
            <summary>
            The base class for pluralizers, which infer the plural form of a given noun.
            </summary>
        </member>
        <member name="M:Rant.Formats.Pluralizer.Pluralize(System.String)">
            <summary>
            Converts the specified input noun to a plural version.
            </summary>
            <param name="input">The noun to convert.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Formats.RantFormat">
            <summary>
            Describes language-specific formatting instructions for localizing interpreter output.
            </summary>
        </member>
        <member name="F:Rant.Formats.RantFormat.English">
            <summary>
            English formatting.
            </summary>
        </member>
        <member name="F:Rant.Formats.RantFormat.German">
            <summary>
            German formatting.
            </summary>
        </member>
        <member name="M:Rant.Formats.RantFormat.#ctor">
            <summary>
            Creates a new RantFormat instance with default values.
            </summary>
        </member>
        <member name="M:Rant.Formats.RantFormat.#ctor(System.Globalization.CultureInfo,Rant.Formats.WritingSystem,System.Collections.Generic.IEnumerable{System.String},Rant.Formats.Pluralizer,Rant.Formats.NumberVerbalizer)">
            <summary>
            Creates a new RantFormat instance with the specified configuration data.
            </summary>
            <param name="culture">The culture to associate with the format.</param>
            <param name="writingSystem">The writing system to use.</param>
            <param name="titleCaseExclusions">A collection of words to exclude from title case capitalization.</param>
            <param name="pluralizer">The pluralizer to use.</param>
            <param name="numVerbalizer">The number verbalizer to use.</param>
        </member>
        <member name="P:Rant.Formats.RantFormat.TitleCaseExclusions">
            <summary>
            Gets the collection of words excluded from Title Case capitalization.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.WritingSystem">
            <summary>
            The writing system for the current format.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.Culture">
            <summary>
            The culture to format output strings with.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.Pluralizer">
            <summary>
            The pluralizer used by the [plural] function to infer plural nouns.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.NumberVerbalizer">
            <summary>
            The number verbalizer for the current format.
            </summary>
        </member>
        <member name="T:Rant.Metadata.IRantFunction">
            <summary>
            Provides access to metadata for a Rant function overload.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantFunction.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantFunction.Description">
            <summary>
            Gets the description for the function overload.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantFunction.HasParamArray">
            <summary>
            Indicates whether the last parameter accepts multiple values.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantFunction.ParamCount">
            <summary>
            Gets the number of parameters accepted by the function overload.
            </summary>
        </member>
        <member name="M:Rant.Metadata.IRantFunction.GetParameters">
            <summary>
            Enumerates the parameters for the function overload.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Metadata.IRantFunctionGroup">
            <summary>
            Provides access to metadata for a group of overloads for a specific Rant function.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantFunctionGroup.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantFunctionGroup.Overloads">
            <summary>
            Gets the available overloads for the function.
            </summary>
        </member>
        <member name="T:Rant.Metadata.IRantModeValue">
            <summary>
            Provides information on Rant's mode values, like number formats and synchronizer types.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantModeValue.Name">
            <summary>
            Gets the name of the value.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantModeValue.Description">
            <summary>
            Gets the description for the value.
            </summary>
        </member>
        <member name="T:Rant.Metadata.IRantParameter">
            <summary>
            Provides access to metadata for a Rant function parameter.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantParameter.RantType">
            <summary>
            Gets the data type accepted by the parameter.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantParameter.IsParams">
            <summary>
            Indicates whether the parameter accepts multiple values.
            </summary>
        </member>
        <member name="P:Rant.Metadata.IRantParameter.Description">
            <summary>
            Gets the description for the parameter.
            </summary>
        </member>
        <member name="M:Rant.Metadata.IRantParameter.GetEnumValues">
            <summary>
            Enumerates all possible values for flag and mode parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Metadata.RantDescriptionAttribute">
            <summary>
            Used for annotating Rant functions and their parameters with descriptions that can be used to generate documentation.
            </summary>
        </member>
        <member name="T:Rant.Metadata.RantFunctionAttribute">
            <summary>
            Indicates to the Rant engine that a method should be registered as a Rant function.
            </summary>
        </member>
        <member name="T:Rant.RantArgAttribute">
            <summary>
            Attribute used to change the name of an argument pulled from a field or property.
            </summary>
        </member>
        <member name="M:Rant.RantArgAttribute.#ctor(System.String)">
            <summary>
            Creates a new RantArgAttribute with the specified name.
            </summary>
            <param name="name">The new name to assign to the argument.</param>
        </member>
        <member name="P:Rant.RantArgAttribute.Name">
            <summary>
            The new name to assign to the argument.
            </summary>
        </member>
        <member name="T:Rant.RantCompilerException">
            <summary>
            Represents an error raised by Rant during pattern compilation.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerException.SourceName">
            <summary>
            The name of the source pattern on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerException.InternalError">
            <summary>
            Indicates whether the exception is the result of an internal engine error.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerException.ErrorCount">
            <summary>
            Gets the number of errors returned by the compiler.
            </summary>
        </member>
        <member name="M:Rant.RantCompilerException.GetErrors">
            <summary>
            Enumerates the errors collected from the compiler.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.RantCompilerMessage">
            <summary>
            Represents a message emitted by the Rant compiler while performing a job.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerMessage.Type">
            <summary>
            The type of message.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerMessage.Source">
            <summary>
            The source path of the pattern being compiled when the message was generated.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerMessage.Message">
            <summary>
            The message text.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerMessage.Line">
            <summary>
            The line on which the message was generated.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerMessage.Column">
            <summary>
            The column on which the message was generated.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerMessage.Index">
            <summary>
            The character index on which the message was generated.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerMessage.Length">
            <summary>
            The length, in characters, of the code snippet to which the message pertains.
            </summary>
        </member>
        <member name="M:Rant.RantCompilerMessage.ToString">
            <summary>
            Generates a string representation of the message.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.RantCompilerMessageType">
            <summary>
            Defines message types used by the Rant compiler.
            </summary>
        </member>
        <member name="F:Rant.RantCompilerMessageType.Warning">
            <summary>
            Indicates a problem that did not interfere with compilation.
            </summary>
        </member>
        <member name="F:Rant.RantCompilerMessageType.Error">
            <summary>
            Indicates a problem that made compilation impossible, usually a syntax error.
            </summary>
        </member>
        <member name="T:Rant.RantInternalException">
            <summary>
            Represents an error that has been caused by a problem inside the Rant engine. This typically indicates the presence of
            a bug.
            </summary>
        </member>
        <member name="T:Rant.Resources.RantDependencyResolver">
            <summary>
            Default class for package depdendency resolving.
            </summary>
        </member>
        <member name="M:Rant.Resources.RantDependencyResolver.TryResolvePackage(Rant.Resources.RantPackageDependency,Rant.Resources.RantPackage@)">
            <summary>
            Attempts to resolve a depdendency to the appropriate package.
            </summary>
            <param name="depdendency">The depdendency to resolve.</param>
            <param name="package">The package loaded from the depdendency.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Resources.RantPackageDependency">
            <summary>
            Represents a dependency for a Rant package.
            </summary>
        </member>
        <member name="M:Rant.Resources.RantPackageDependency.#ctor(System.String,System.String)">
            <summary>
            Initializes a new RantPackageDependency object.
            </summary>
            <param name="id">The ID of the package.</param>
            <param name="version">The targeted version of the package.</param>
        </member>
        <member name="M:Rant.Resources.RantPackageDependency.#ctor(System.String,Rant.Resources.RantPackageVersion)">
            <summary>
            Initializes a new RantPackageDependency object.
            </summary>
            <param name="id">The ID of the package.</param>
            <param name="version">The targeted version of the package.</param>
        </member>
        <member name="P:Rant.Resources.RantPackageDependency.ID">
            <summary>
            The ID of the package.
            </summary>
        </member>
        <member name="P:Rant.Resources.RantPackageDependency.Version">
            <summary>
            The targeted version of the package.
            </summary>
        </member>
        <member name="P:Rant.Resources.RantPackageDependency.AllowNewer">
            <summary>
            Specifies whether the dependency will accept a package newer than the one given.
            </summary>
        </member>
        <member name="M:Rant.Resources.RantPackageDependency.CheckVersion(Rant.Resources.RantPackageVersion)">
            <summary>
            Checks if the specified version is compatible with the current dependency.
            </summary>
            <param name="version">The version to check.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackageDependency.Create(Rant.Resources.RantPackage)">
            <summary>
            Creates a dependency for the specified package.
            </summary>
            <param name="package">The package to create the dependency for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackageDependency.ToString">
            <summary>
            Returns a string representation of the current dependency.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackageDependency.GetHashCode">
            <summary>
            Gets the hash code for the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackageDependency.Equals(System.Object)">
            <summary>
            Determines whether the current RantPackageDependency is shares an ID with the specified object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Resources.RantPackageVersion">
            <summary>
            Represents a version number for a Rant package.
            </summary>
        </member>
        <member name="M:Rant.Resources.RantPackageVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new RantPackageVersion instance with the specified values.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="revision">The revision number.</param>
        </member>
        <member name="M:Rant.Resources.RantPackageVersion.#ctor">
            <summary>
            Initializes a new RantPackageVersion instance with all values set to zero.
            </summary>
        </member>
        <member name="P:Rant.Resources.RantPackageVersion.Major">
            <summary>
            The major version.
            </summary>
        </member>
        <member name="P:Rant.Resources.RantPackageVersion.Minor">
            <summary>
            The minor version.
            </summary>
        </member>
        <member name="P:Rant.Resources.RantPackageVersion.Revision">
            <summary>
            The revision number.
            </summary>
        </member>
        <member name="M:Rant.Resources.RantPackageVersion.Parse(System.String)">
            <summary>
            Attempts to parse a version string and returns the equivalent RantPackageVersion.
            </summary>
            <param name="version">The version string to parse.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackageVersion.TryParse(System.String,Rant.Resources.RantPackageVersion@)">
            <summary>
            Attempts to parse a version string and outputs the equivalent RantPackageVersion.
            </summary>
            <param name="version">The version string to parse.</param>
            <param name="result">The parsing result, if successful.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackageVersion.ToString">
            <summary>
            Returns a string representation of the current version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackageVersion.Equals(System.Object)">
            <summary>
            Determines whether the current version is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Resources.RantResource">
            <summary>
            The base class for Rant resources that can be included in a package.
            </summary>
        </member>
        <member name="T:Rant.Resources.RantPackage">
            <summary>
            Represents a collection of patterns and tables that can be exported to an archive file.
            </summary>
        </member>
        <member name="P:Rant.Resources.RantPackage.Title">
            <summary>
            The display name of the package.
            </summary>
        </member>
        <member name="P:Rant.Resources.RantPackage.ID">
            <summary>
            The ID of the package.
            </summary>
        </member>
        <member name="P:Rant.Resources.RantPackage.Description">
            <summary>
            The description for the package.
            </summary>
        </member>
        <member name="P:Rant.Resources.RantPackage.Tags">
            <summary>
            The tags associated with the package.
            </summary>
        </member>
        <member name="P:Rant.Resources.RantPackage.Version">
            <summary>
            The package version.
            </summary>
        </member>
        <member name="P:Rant.Resources.RantPackage.Authors">
            <summary>
            The authors of the package.
            </summary>
        </member>
        <member name="M:Rant.Resources.RantPackage.AddDependency(Rant.Resources.RantPackageDependency)">
            <summary>
            Adds the specified dependency to the package.
            </summary>
            <param name="dependency">The dependency to add.</param>
        </member>
        <member name="M:Rant.Resources.RantPackage.AddDependency(System.String,System.String)">
            <summary>
            Adds the specified dependency to the package.
            </summary>
            <param name="id">The ID of the package.</param>
            <param name="version">The package version to target.</param>
        </member>
        <member name="M:Rant.Resources.RantPackage.DependsOn(System.String,System.String)">
            <summary>
            Determines whether the package depends on the specified package.
            </summary>
            <param name="id">The ID of the package to check for.</param>
            <param name="version">The version of the package to check for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.DependsOn(Rant.Resources.RantPackageDependency)">
            <summary>
            Determines whether the package has the specified dependency.
            </summary>
            <param name="dependency">The dependency to check for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.GetDependencies">
            <summary>
            Enumerates the package's dependencies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the specified dependency from the package.
            </summary>
            <param name="id">The ID of the dependency to remove.</param>
            <param name="version">The version of the dependency to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.RemoveDependency(Rant.Resources.RantPackageDependency)">
            <summary>
            Removes the specified dependency from the package.
            </summary>
            <param name="dependency">The dependency to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.ClearDependencies">
            <summary>
            Removes all dependencies from the package.
            </summary>
        </member>
        <member name="M:Rant.Resources.RantPackage.GetResources">
            <summary>
            Enumerates all resources in the package.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.GetResources``1">
            <summary>
            Enumerates all resources matching the specified resource type.
            </summary>
            <typeparam name="TResource">The resource type to search for.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.AddResource(Rant.Resources.RantResource)">
            <summary>
            Adds the specified resource to the package.
            </summary>
            <param name="resource">The resource to add.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.RemoveResource(Rant.Resources.RantResource)">
            <summary>
            Removes the specified resource from the package.
            </summary>
            <param name="resource">The resource to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.ContainsResource(Rant.Resources.RantResource)">
            <summary>
            Determines whether the package contains the specified resource.
            </summary>
            <param name="resource">The resource to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.Save(System.String,System.Boolean)">
            <summary>
            Saves the package to the specified file path.
            </summary>
            <param name="path">The path to the file to create.</param>
            <param name="compress">Specifies whether to compress the package contents.</param>
        </member>
        <member name="M:Rant.Resources.RantPackage.Load(System.String)">
            <summary>
            Loads a package from the specified path and returns it as a RantPackage object.
            </summary>
            <param name="path">The path to the package file to load.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.Load(System.IO.Stream)">
            <summary>
            Loads a package from the specified stream and returns it as a RantPackage object.
            </summary>
            <param name="source">The stream to load the package data from.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Resources.RantPackage.ToString">
            <summary>
            Returns a string containing the title and version of the package.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.RantOutputEntry">
            <summary>
            Represents the output of a single channel.
            </summary>
        </member>
        <member name="P:Rant.RantOutputEntry.Name">
            <summary>
            Gets the name of the channel.
            </summary>
        </member>
        <member name="P:Rant.RantOutputEntry.Value">
            <summary>
            Gets the value of the channel.
            </summary>
        </member>
        <member name="P:Rant.RantOutputEntry.Visiblity">
            <summary>
            The visibility of the channel that created the output entry.
            </summary>
        </member>
        <member name="T:Rant.RantProgramArgs">
            <summary>
            Represents a set of arguments that can be passed to a pattern.
            </summary>
        </member>
        <member name="M:Rant.RantProgramArgs.#ctor">
            <summary>
            Create a new, empty RantPatternArgs instance.
            </summary>
        </member>
        <member name="P:Rant.RantProgramArgs.Item(System.String)">
            <summary>
            Gets or sets an argument of the specified name.
            </summary>
            <param name="key">The name of the argument.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantProgramArgs.CreateFrom(System.Object)">
            <summary>
            Creates a RantPatternArgs instance from the specified object.
            Works with anonymous types!
            </summary>
            <param name="value">The object to create an argument set from.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantProgramArgs.Contains(System.String)">
            <summary>
            Determines whether an argument by the specified name exists in the current list.
            </summary>
            <param name="key">The name of the argument to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantProgramArgs.Remove(System.String)">
            <summary>
            Removes the specified argument.
            </summary>
            <param name="key">The name of the argument to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantProgramArgs.Clear">
            <summary>
            Clears all values.
            </summary>
        </member>
        <member name="T:Rant.RantUtils">
            <summary>
            Contains miscellaneous utility methods that provide information about the Rant engine.
            </summary>
        </member>
        <member name="M:Rant.RantUtils.FunctionExists(System.String)">
            <summary>
            Determines whether a function with the specified name is defined in the current engine version.
            </summary>
            <param name="functionName">The name of the function to search for. Argument is not case-sensitive.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunction(System.String)">
            <summary>
            Returns the function with the specified name. The return value will be null if the function is not found.
            </summary>
            <param name="functionName">The name of the function to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunctionNames">
            <summary>
            Enumerates the names of all available Rant functions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunctionNamesAndAliases">
            <summary>
            Enumerates all function names and their aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunctions">
            <summary>
            Enumerates the available functions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunctionDescription(System.String,System.Int32)">
            <summary>
            Returns the description for the function with the specified name.
            </summary>
            <param name="functionName">The name of the function to get the description for.</param>
            <param name="argc">The number of arguments in the overload to get the description for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunctionAliases(System.String)">
            <summary>
            Enumerates the aliases assigned to the specified function name.
            </summary>
            <param name="functionName">The function name to retrieve aliases for.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`1">
            <summary>
            1-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
        </member>
        <member name="F:Rant._`1.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="M:Rant._`1.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`1.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`1.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`2">
            <summary>
            2-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
        </member>
        <member name="F:Rant._`2.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`2.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="M:Rant._`2.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`2.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`2.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`3">
            <summary>
            3-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
        </member>
        <member name="F:Rant._`3.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`3.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`3.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="M:Rant._`3.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`3.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`3.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`4">
            <summary>
            4-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
        </member>
        <member name="F:Rant._`4.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`4.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`4.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="F:Rant._`4.Item4">
            <summary>
            The fourth item.
            </summary>
        </member>
        <member name="M:Rant._`4.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`4.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`4.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`5">
            <summary>
            5-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
        </member>
        <member name="F:Rant._`5.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`5.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`5.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="F:Rant._`5.Item4">
            <summary>
            The fourth item.
            </summary>
        </member>
        <member name="F:Rant._`5.Item5">
            <summary>
            The fifth item.
            </summary>
        </member>
        <member name="M:Rant._`5.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`5.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`5.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`6">
            <summary>
            6-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
        </member>
        <member name="F:Rant._`6.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`6.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`6.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="F:Rant._`6.Item4">
            <summary>
            The fourth item.
            </summary>
        </member>
        <member name="F:Rant._`6.Item5">
            <summary>
            The fifth item.
            </summary>
        </member>
        <member name="F:Rant._`6.Item6">
            <summary>
            The sixth item.
            </summary>
        </member>
        <member name="M:Rant._`6.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`6.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`6.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`7">
            <summary>
            7-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
            <typeparam name="G">Seventh type.</typeparam>
        </member>
        <member name="F:Rant._`7.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item4">
            <summary>
            The fourth item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item5">
            <summary>
            The fifth item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item6">
            <summary>
            The sixth item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item7">
            <summary>
            The seventh item.
            </summary>
        </member>
        <member name="M:Rant._`7.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`7.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`7.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`8">
            <summary>
            8-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
            <typeparam name="G">Seventh type.</typeparam>
            <typeparam name="H">Eighth tuple.</typeparam>
        </member>
        <member name="F:Rant._`8.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item4">
            <summary>
            The fourth item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item5">
            <summary>
            The fifth item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item6">
            <summary>
            The sixth item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item7">
            <summary>
            The seventh item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item8">
            <summary>
            The eighth item.
            </summary>
        </member>
        <member name="M:Rant._`8.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`8.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`8.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.RantOutput">
            <summary>
            Represents a collection of strings generated by a pattern.
            </summary>
        </member>
        <member name="P:Rant.RantOutput.Item(System.String)">
            <summary>
            Gets the output of the channel with the specified name.
            </summary>
            <param name="channel">The name of the channel.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.RantOutput.Item(System.String[])">
            <summary>
            Gets an array containing the values of the specified channels, in the order they appear.
            </summary>
            <param name="channels">The names of the channels whose values are to be retrieved.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.RantOutput.Seed">
            <summary>
            The seed used to generate the output.
            </summary>
        </member>
        <member name="P:Rant.RantOutput.BaseGeneration">
            <summary>
            The generation at which the RNG was initially set before the pattern was run.
            </summary>
        </member>
        <member name="P:Rant.RantOutput.Main">
            <summary>
            The main output string.
            </summary>
        </member>
        <member name="M:Rant.RantOutput.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the outputs in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantOutput.ToString">
            <summary>
            Returns the output from the "main" channel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantOutput.op_Implicit(Rant.RantOutput)~System.String">
            <summary>
            Returns the output from the "main" channel.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.Querying.Carrier">
            <summary>
            Represents information that can be used to synchronize query selections based on certain criteria.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Querying.Carrier.#ctor">
            <summary>
            Creates an empty carrier.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Querying.Carrier.GetTypeCount(Rant.Vocabulary.Querying.CarrierComponentType)">
            <summary>
            Returns how many of a certain carrier component type are assigned to the current instance.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Querying.Carrier.AddComponent(Rant.Vocabulary.Querying.CarrierComponentType,System.String[])">
            <summary>
            Adds a component of the specified type and name to the current instance.
            </summary>
            <param name="type">The type of carrier to add.</param>
            <param name="values">The names to assign to the component type.</param>
        </member>
        <member name="M:Rant.Vocabulary.Querying.Carrier.GetComponentsOfType(Rant.Vocabulary.Querying.CarrierComponentType)">
            <summary>
            Iterates through the current instances's components of the specified type.
            </summary>
            <param name="type">The type of component to iterate through.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Querying.Carrier.GetTotalCount">
            <summary>
            Retreives the total amount of all components.
            </summary>
            <returns>The total amount of all components.</returns>
        </member>
        <member name="T:Rant.Vocabulary.Querying.CarrierComponentType">
            <summary>
            Defines carrier types for queries.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.Match">
            <summary>
            Select the same entry every time.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.Dissociative">
            <summary>
            Share no classes.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.MatchDissociative">
            <summary>
            Share no classes with a match carrier entry.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.Associative">
            <summary>
            Classes must exactly match.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.MatchAssociative">
            <summary>
            Classes must exactly match those of a match carrier entry.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.Divergent">
            <summary>
            Have at least one different class.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.MatchDivergent">
            <summary>
            Have at least one different class than a match carrier entry.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.Relational">
            <summary>
            Share at least one class.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.MatchRelational">
            <summary>
            Share at least one class with a match carrier entry.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.Unique">
            <summary>
            Never choose the same entry twice.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.MatchUnique">
            <summary>
            Choose an entry that is different from a match carrier entry.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierComponentType.Rhyme">
            <summary>
            Choose terms that rhyme.
            </summary>
        </member>
        <member name="T:Rant.Vocabulary.Querying.CarrierState">
            <summary>
            Maintains state information used by queries.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierState._assocTable">
            <summary>
            Associative/Disassociative/Relational/Divergent carrier table.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierState._matchTable">
            <summary>
            Match table.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierState._rhymeTable">
            <summary>
            Rhyme carrier table.
            Wherein the KEY is the RHYME ID and SUBTYPE, and the VALUE is the ROOT TERM and USED TERMS.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.Querying.CarrierState._uniqueTable">
            <summary>
            Distinct carrier table.
            Wherein the KEY is the UNIQUE ID, and the VALUE is the collection of used entries.
            </summary>
        </member>
        <member name="T:Rant.Vocabulary.Querying.ClassFilter">
            <summary>
            Defines a set of class filtering rules for a query.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.ClassFilter.IsEmpty">
            <summary>
            Gets a boolean value indicating whether there are any rules added to the current ClassFilter instance.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.ClassFilter.SimpleFilter">
            <summary>
            Whether the class filter is simple, i.e. there are no switch rules and every rule should match.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Querying.ClassFilter.AddRule(Rant.Vocabulary.Querying.ClassFilterRule)">
            <summary>
            Adds a single-class rule to the filter.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Rant.Vocabulary.Querying.ClassFilter.AddRuleSwitch(Rant.Vocabulary.Querying.ClassFilterRule[])">
            <summary>
            Adds a rule set that must satisfy one of the specified rules.
            </summary>
            <param name="items">The items to include in the rule switch.</param>
        </member>
        <member name="M:Rant.Vocabulary.Querying.ClassFilter.AllowsClass(System.String)">
            <summary>
            Returns a boolean value indicating whether the specified class is explicitly allowed by the current ClassFilter.
            </summary>
            <param name="className">The class to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.Querying.ClassFilterRule">
            <summary>
            Defines a query filter for a single dictionary entry class.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Querying.ClassFilterRule.#ctor(System.String)">
            <summary>
            Initializes a new ClassFilterRule that checks for a positive match to the specified class.
            </summary>
            <param name="className">The name of the class to search for.</param>
        </member>
        <member name="M:Rant.Vocabulary.Querying.ClassFilterRule.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new ClassFilterRule that checks for a positive or negative match to the specified class.
            </summary>
            <param name="className">The name of the class to search for.</param>
            <param name="shouldMatch">Determines whether the filter item expects a positive or negative match for the class.</param>
        </member>
        <member name="P:Rant.Vocabulary.Querying.ClassFilterRule.ShouldMatch">
            <summary>
            Determines whether the filter item expects a positive or negative match for the class.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.ClassFilterRule.Class">
            <summary>
            The name of the class to search for.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Querying.Filter.Test(Rant.Vocabulary.RantDictionary,Rant.Vocabulary.RantDictionaryTable,Rant.Vocabulary.RantDictionaryEntry,System.Int32,Rant.Vocabulary.Querying.Query)">
            <summary>
            Determines if the specified dictionary entry passes the filter.
            </summary>
            <param name="dictionary">The dictionary being queried.</param>
            <param name="table">The table being queried.</param>
            <param name="entry">The entry to test.</param>
            <param name="termIndex">The index of the term requested by the query.</param>
            <param name="query">The originating query.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.Querying.RangeFilter">
            <summary>
            Defines a set of boundaries that can be used to enforce range requirements on numeric values.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Querying.RangeFilter.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new Range object with the specified minimum and maximum bounds.
            </summary>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
        </member>
        <member name="P:Rant.Vocabulary.Querying.RangeFilter.Minimum">
            <summary>
            Gets or sets the minimum bound of the range. Set this to null for no minimum.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.RangeFilter.Maximum">
            <summary>
            Gets or sets the maximum bound of the range. Set this to null for no maximum.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.RangeFilter.Anything">
            <summary>
            Creates a new Range object that accepts all values.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Querying.RangeFilter.TestAgainst(System.Int32)">
            <summary>
            Determines if the specified number is within the current range.
            </summary>
            <param name="value">The value to test.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Querying.RangeFilter.AtLeast(System.Int32)">
            <summary>
            Creates a new Range object with a minimum bound.
            </summary>
            <param name="min">The minimum bound.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Querying.RangeFilter.AtMost(System.Int32)">
            <summary>
            Creates a new Range object with a maximum bound.
            </summary>
            <param name="max">The maximum bound.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Querying.RangeFilter.Exactly(System.Int32)">
            <summary>
            Creates a new Range object that accepts a single value.
            </summary>
            <param name="number">The value that the returned Range will accept.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Querying.RangeFilter.Between(System.Int32,System.Int32)">
            <summary>
            Creates a new Range object with a minimum and maximum bound.
            </summary>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.Querying.Query">
            <summary>
            Represents a set of search criteria for a Rant dictionary.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.Query.Carrier">
            <summary>
            The carrier for the query.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.Query.Name">
            <summary>
            The name of the table to search.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.Query.Subtype">
            <summary>
            The subtype of the dictionary term to use.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.Query.PluralSubtype">
            <summary>
            The plural subtype to use.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.Query.Exclusive">
            <summary>
            Specifies exclusivity of the class filter.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.Query.Complement">
            <summary>
            Complement for phrasal verbs. Not yet available in public API.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.Query.BareQuery">
            <summary>
            Returns whether the query is a "bare query" - should only return the table itself.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Querying.Query.HasCarrier">
            <summary>
            Returns whether the query has a carrier.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Querying.Query.GetNonClassFilters">
            <summary>
            Gets all non-class filters in the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Querying.Query.GetClassFilters">
            <summary>
            Gets all class filters in the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Querying.Query.GetAllFilters">
            <summary>
            Gets all filters in the query.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.RantDictionaryTable">
            <summary>
            Represents a named collection of dictionary entries.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.FromStream(System.String,System.IO.Stream)">
            <summary>
            Loads a table from the specified stream.
            </summary>
            <param name="origin">The origin of the stream. This will typically be a file path or package name.</param>
            <param name="stream">The stream to load the table from.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.#ctor(System.String,System.Int32,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Initializes a new instance of the RantDictionaryTable class with the specified name and term count.
            </summary>
            <param name="name">The name of the table.</param>
            <param name="termsPerEntry">The number of terms to store in each entry.</param>
            <param name="hidden">Collection of hidden classes.</param>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.Name">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.Language">
            <summary>
            Gets the language code associated with the table (not yet used).
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.HiddenClasses">
            <summary>
            Gets the hidden classes of the table.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.EntryCount">
            <summary>
            Gets the number of entries stored in the table.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.TermsPerEntry">
            <summary>
            Gets the number of terms required for entries contained in the current table.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.GetEntries">
            <summary>
            Enumerates the entries stored in the table.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.Item(System.Int32)">
            <summary>
            Gets the entry at the specified index in the current <see cref="T:Rant.Vocabulary.RantDictionaryTable"/> object.
            </summary>
            <param name="index">The index of the entry to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.GetSubtypes">
            <summary>
            Enumerates the subtypes contained in the current table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.IsClassHidden(System.String)">
            <summary>
            Determines whether the specified class is hidden by the table.
            </summary>
            <param name="className">The name of the class to check.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.HideClass(System.String)">
            <summary>
            Hides the specified class.
            </summary>
            <param name="className">The name of the class to hide.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.UnhideClass(System.String)">
            <summary>
            Unhides the specified class.
            </summary>
            <param name="className">The name of the class to unhide.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.EnableWeighting">
            <summary>
            Determines whether weights are enabled on this table.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.CacheNeedsRebuild">
            <summary>
            Indicates whether the cache needs to be rebuilt.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.AddEntry(Rant.Vocabulary.RantDictionaryEntry)">
            <summary>
            Adds the specified entry to the table.
            </summary>
            <param name="entry">The entry to add to the table.</param>
            <returns>True if successfully added; otherwise, False.</returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.RemoveEntry(Rant.Vocabulary.RantDictionaryEntry)">
            <summary>
            Removes the specified entry from the table.
            </summary>
            <param name="entry">The entry to remove from the table.</param>
            <returns>True if successfully removed; otherwise, False.</returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.ContainsEntry(Rant.Vocabulary.RantDictionaryEntry)">
            <summary>
            Checks if the table contains the specified entry.
            </summary>
            <param name="entry">The entry to search for.</param>
            <returns>True if found, False if not.</returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.GetClasses">
            <summary>
            Searches entries in the current table and enumerates every single distinct class found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.ContainsClass(System.String)">
            <summary>
            Returns a boolean value indicating whether the current <see cref="T:Rant.Vocabulary.RantDictionaryTable"/> instance contains one or more entries containing the specified class name.
            </summary>
            <param name="clName">The class name to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.AddSubtype(System.String,System.Int32)">
            <summary>
            Adds a subtype of the specified name to the table.
            If a subtype with the name already exists, it will be overwritten.
            Subtypes are case insensitive.
            If the name is not a valid identifier string, it will not be accepted.
            </summary>
            <param name="subtypeName">The name of the subtype to add.</param>
            <param name="index">The term index to associate with the name.</param>
            <returns>
            FALSE if the name was not a valid identifier or the index was out of range. TRUE if the operation was
            successful.
            </returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.RemoveSubtype(System.String)">
            <summary>
            Removes the specified subtype from the table, if it exists.
            Subtypes are case insensitive.
            </summary>
            <param name="subtypeName">The name of the subtype to remove.</param>
            <returns>TRUE if the subtype was found and removed. FALSE if the subtype was not found.</returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.GetSubtypeIndex(System.String)">
            <summary>
            Retrieves the term index assigned to the specified subtype.
            If the subtype is not found, the method will return -1.
            If the subtype is a null, whitespace, or an empty string, the method will return 0.
            </summary>
            <param name="subtype">The subtype to look up.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.GetSubtypesForIndex(System.Int32)">
            <summary>
            Enumerates the subtypes associated with the specified term index.
            </summary>
            <param name="index">The index to get subtypes for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.Merge(Rant.Vocabulary.RantDictionaryTable)">
            <summary>
            Adds another table's entries to the current table, given that they share the same name and term count.
            </summary>
            <param name="other">The table whose entries will be added to the current instance.</param>
            <returns>True if merge succeeded; otherwise, False.</returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.RebuildCache">
            <summary>
            Optimizes the table. Call this after writing items to the table or removing items from a table.
            If you're writing or removing multiple items, call this after all the actions have been performed.
            </summary>
        </member>
        <member name="T:Rant.Vocabulary.Utilities.Diff">
            <summary>
            Diffs your marks.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Utilities.Diff.#ctor(System.String)">
            <summary>
            Creates a new Diffmark pattern for you to enjoy.
            </summary>
            <param name="patternString">The pattern string.</param>
        </member>
        <member name="P:Rant.Vocabulary.Utilities.Diff.Pattern">
            <summary>
            The pattern string for the diff.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Utilities.Diff.Mark(System.String)">
            <summary>
            Applies the pattern to a string.
            </summary>
            <param name="baseString">The string to apply the pattern to.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Utilities.Diff.Mark(System.String,System.String)">
            <summary>
            Transforms one string to another.
            </summary>
            <param name="baseString">The base string to transform.</param>
            <param name="pattern">The Diffmark pattern to apply to the string.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Utilities.Diff.Derive(System.String,System.String)">
            <summary>
            Derives a Diffmark pattern that can transform the specified 'before' string to the specified 'after' string.
            </summary>
            <param name="before">The string before it is transformed.</param>
            <param name="after">The string after it is transformed.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.Utilities.DoubleMetaphoneStringExtension">
            <summary>
            DoubleMetaphone string extension
            </summary>
            <remarks>
            Original C++ implementation:
            "Double Metaphone (c) 1998, 1999 by Lawrence Philips"
            http://www.ddj.com/cpp/184401251?pgno=1
            </remarks>
        </member>
        <member name="T:Rant.Vocabulary.RantTableLoadException">
            <summary>
            Thrown when Rant encounters an error while loading a dictionary table.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantTableLoadException.Line">
            <summary>
            Gets the line number on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantTableLoadException.Column">
            <summary>
            Gets the column on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantTableLoadException.Origin">
            <summary>
            Gets a string describing where the table was loaded from. For tables loaded from disk, this will be the file path.
            </summary>
        </member>
        <member name="T:Rant.Vocabulary.RantDictionaryEntry">
            <summary>
            Stores information about a dictionary entry.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.#ctor(Rant.Vocabulary.RantDictionaryTerm[])">
            <summary>
            Creates a new instance of the <see cref="T:Rant.Vocabulary.RantDictionaryEntry" /> object from the specified term array.
            </summary>
            <param name="terms">The terms in the entry.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.#ctor(System.String[],System.Collections.Generic.IEnumerable{System.String},System.Single)">
            <summary>
            Creates a new <see cref="T:Rant.Vocabulary.RantDictionaryEntry" /> object from the specified term array, classes, and weight.
            </summary>
            <param name="terms">The terms in the entry.</param>
            <param name="classes">The classes associated with the entry.</param>
            <param name="weight">The weight of the entry.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.#ctor(System.Collections.Generic.IEnumerable{Rant.Vocabulary.RantDictionaryTerm},System.Collections.Generic.IEnumerable{System.String},System.Single)">
            <summary>
            Creates a new <see cref="T:Rant.Vocabulary.RantDictionaryEntry" /> object from the specified term collection, classes, and weight.
            </summary>
            <param name="terms">The terms in the entry.</param>
            <param name="classes">The classes associated with the entry.</param>
            <param name="weight">The weight of the entry.</param>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryEntry.TermCount">
            <summary>
            Gets the number of terms stored in the current entry.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryEntry.ClassCount">
            <summary>
            Gets the number of classes in the current entry.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryEntry.HasClasses">
            <summary>
            Returns whether or not the entry has classes.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryEntry.Item(System.Int32)">
            <summary>
            Gets or sets the term at the specified index.
            </summary>
            <param name="index">The index of the term to access.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryEntry.Weight">
            <summary>
            Gets the weight value of the entry.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.GetTerms">
            <summary>
            Enumerates the terms stored in the current entry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.GetClasses">
            <summary>
            Returns a collection of classes assigned to the current entry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.GetOptionalClasses">
            <summary>
            Returns a collection of the optional classes assigned to the current entry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.AddClass(System.String,System.Boolean)">
            <summary>
            Adds the specified class to the current entry.
            </summary>
            <param name="className">The name of the class.</param>
            <param name="optional">Specifies whether the class is optional in carrier associations.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.RemoveClass(System.String)">
            <summary>
            Removes the class with the specified name from the current entry.
            </summary>
            <param name="className">The name of the class to remove.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.SetMetadata(System.String,System.Object)">
            <summary>
            Sets a metadata value under the specified key in the entry.
            </summary>
            <param name="key">The key to store the data under.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.RemoveMetadata(System.String)">
            <summary>
            Removes the metadata with the specified key from the entry.
            </summary>
            <param name="key">The key of the metadata entry to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.GetMetadataKeys">
            <summary>
            Enumerates all the metadata keys contained in the entry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.GetMetadata(System.String)">
            <summary>
            Locates and returns the metadata value associated with the specified key. Returns Null if not found.
            </summary>
            <param name="key">The key of the metadata to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.ContainsMetadataKey(System.String)">
            <summary>
            Determines if the entry contains metadata attached to the specified key.
            </summary>
            <param name="key">The key to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.ContainsClass(System.String)">
            <summary>
            Returns a boolean valie indicating whether the current entry contains the specified class.
            </summary>
            <param name="className">The class to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.GetRequiredClasses">
            <summary>
            Returns a collection of required (non-optional) classes assigned to the current entry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.ToString">
            <summary>
            Returns a string representation of the current <see cref="T:Rant.Vocabulary.RantDictionaryEntry" /> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.RantDictionary">
            <summary>
            Represents a dictionary that can be loaded and queried by Rant.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rant.Vocabulary.RantDictionary" /> class with no tables.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.#ctor(System.Collections.Generic.IEnumerable{Rant.Vocabulary.RantDictionaryTable})">
            <summary>
            Initializes a new instance of the <see cref="T:Rant.Vocabulary.RantDictionary" /> class with the specified set of tables.
            </summary>
            <param name="tables">The tables to store in the dictionary.</param>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionary.Item(System.String)">
            <summary>
            Gets the table with the specified name.
            </summary>
            <param name="name">The name of the table to retrieve.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionary.IncludedHiddenClasses">
            <summary>
            Gets all currently exposed hidden classes.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionary.EnableWeighting">
            <summary>
            Determines whether tables will favor weighted distribution, if available.
            Weighted distribution has a significantl impact on performance.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.IncludeHiddenClass(System.String)">
            <summary>
            Exposes a hidden class to query results.
            </summary>
            <param name="hiddenClassName">The name of the hidden class to expose.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.ExcludeHiddenClass(System.String)">
            <summary>
            Unexposes a hidden class from query results.
            </summary>
            <param name="hiddenClassName">The name of the hidden class to unexpose.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.ClassExposed(System.String)">
            <summary>
            Determines whether the specified class has been manually exposed (overriding hidden status).
            </summary>
            <param name="className">The name of the class to check.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.AddTable(Rant.Vocabulary.RantDictionaryTable)">
            <summary>
            Adds a new <see cref="T:Rant.Vocabulary.RantDictionaryTable" /> object to the dictionary.
            </summary>
            <param name="table">The table to add.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.GetTables">
            <summary>
            Enumerates the tables contained in the current RantDictionary instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.Query(Rant.Core.Sandbox,Rant.Vocabulary.Querying.Query,Rant.Vocabulary.Querying.CarrierState)">
            <summary>
            Queries the RantDictionary according to the specified criteria and returns a random match.
            </summary>
            <param name="sb">The sandbox the query is to be run under.</param>
            <param name="query">The search criteria to use.</param>
            <param name="syncState">The state object to use for carrier synchronization.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.RantDictionaryTerm">
            <summary>
            Represents a single term of a dictionary entry.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTerm.#ctor(System.String,System.Int32)">
            <summary>
            Intializes a new instance of the <see cref="T:Rant.Vocabulary.RantDictionaryTerm" /> class with the specified value string.
            </summary>
            <param name="value">The value of the term.</param>
            <param name="splitIndex">The split index of the term value. Specify -1 for no split.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTerm.#ctor(System.String,System.String)">
            <summary>
            Intializes a new instance of the <see cref="T:Rant.Vocabulary.RantDictionaryTerm" /> class with the specified value and pronunciation
            strings.
            </summary>
            <param name="value">The value of the term.</param>
            <param name="pronunciation">The pronunciation of the term value.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTerm.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Intializes a new instance of the <see cref="T:Rant.Vocabulary.RantDictionaryTerm" /> class with the specified value, pronunciation, and
            split indices.
            </summary>
            <param name="value">The value of the term.</param>
            <param name="pronunciation">The pronunciation of the term value.</param>
            <param name="valueSplitIndex">The split index of the term value. Specify -1 for no split.</param>
            <param name="pronSplitIndex">
            The split index of the term pronunciation string. Specify -1 for no split. Must be
            positive if the value is split and pronunciation data is present.
            </param>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.Value">
            <summary>
            The value string of the term.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.IsSplit">
            <summary>
            Determines whether the term is a split word.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.LeftSide">
            <summary>
            Gets the term value substring on the left side of the split.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.RightSide">
            <summary>
            Gets the term value substring on the right side of the split.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.ValueSplitIndex">
            <summary>
            Gets the split index of the term value.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.PronunciationSplitIndex">
            <summary>
            Gets the split index of the term pronunciation string.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.Pronunciation">
            <summary>
            The pronunciation of the term.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.Syllables">
            <summary>
            An array containing the individual syllables of the pronunciation string.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.SyllableCount">
            <summary>
            The number of syllables in the pronunciation string.
            </summary>
        </member>
        <member name="T:Rant.RantEngine">
            <summary>
            The central class of the Rant engine that allows the execution of patterns.
            </summary>
        </member>
        <member name="F:Rant.RantEngine.Flags">
            <summary>
            The currently set flags.
            </summary>
        </member>
        <member name="M:Rant.RantEngine.#ctor">
            <summary>
            Creates a new RantEngine object without a dictionary.
            </summary>
        </member>
        <member name="M:Rant.RantEngine.#ctor(Rant.Vocabulary.RantDictionary)">
            <summary>
            Creates a new RantEngine object with the specified vocabulary.
            </summary>
            <param name="dictionary">The vocabulary to load in this instance.</param>
        </member>
        <member name="P:Rant.RantEngine.Format">
            <summary>
            The current formatting settings for the engine.
            </summary>
        </member>
        <member name="P:Rant.RantEngine.Dictionary">
            <summary>
            The vocabulary associated with this instance.
            </summary>
        </member>
        <member name="P:Rant.RantEngine.DependencyResolver">
            <summary>
            Gets or sets the depdendency resolver used for packages.
            </summary>
        </member>
        <member name="P:Rant.RantEngine.PreserveCarrierState">
            <summary>
            Specifies whether to preserve carrier states between patterns.
            </summary>
        </member>
        <member name="P:Rant.RantEngine.Item(System.String)">
            <summary>
            Accesses global variables.
            </summary>
            <param name="name">The name of the variable to access.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.ResetCarrierState">
            <summary>
            Deletes all state data in the engine's persisted carrier state, if available.
            </summary>
        </member>
        <member name="M:Rant.RantEngine.GetLoadedProgramNames">
            <summary>
            Enumerates the names of all loaded programs available in this engine instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.GetLoadedPackages">
            <summary>
            Enumerates all packages loaded by this engine instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.ProgramNameLoaded(System.String)">
            <summary>
            Returns a boolean value indicating whether a program by the specified name has been loaded from a package.
            </summary>
            <param name="patternName">The name of the program to check.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.CacheProgramInternal(Rant.RantProgram)">
            <summary>
            Used by package loader
            </summary>
            <param name="program">Program to load</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.LoadPackage(Rant.Resources.RantPackage)">
            <summary>
            Loads the specified package into the engine.
            </summary>
            <param name="package">The package to load.</param>
        </member>
        <member name="M:Rant.RantEngine.LoadPackage(System.String)">
            <summary>
            Loads the package at the specified file path into the engine.
            </summary>
            <param name="path">The path to the package to load.</param>
        </member>
        <member name="M:Rant.RantEngine.GetProgramInternal(System.String)">
            <summary>
            Returns a pattern with the specified name from the engine's cache. If the pattern doesn't exist, it is loaded from
            file.
            </summary>
            <param name="name">The name or path of the pattern to retrieve.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.RantEngine.MaxStackSize">
            <summary>
            Gets or sets the maximum stack size allowed for a pattern.
            </summary>
        </member>
        <member name="M:Rant.RantEngine.Do(System.String,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Compiles the specified string into a pattern, executes it, and returns the resulting output.
            </summary>
            <param name="input">The input string to execute.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoFile(System.String,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Loads the file located at the specified path and executes it, returning the resulting output.
            </summary>
            <param name="path">The path to the file to execute.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.Do(System.String,System.Int64,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Compiles the specified string into a pattern, executes it using a custom seed, and returns the resulting output.
            </summary>
            <param name="input">The input string to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoFile(System.String,System.Int64,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Loads the file located at the specified path and executes it using a custom seed, returning the resulting output.
            </summary>
            <param name="path">The path to the file to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.Do(System.String,Rant.RNG,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Compiles the specified string into a pattern, executes it using a custom RNG, and returns the resulting output.
            </summary>
            <param name="input">The input string to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoFile(System.String,Rant.RNG,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Loads the file located at the specified path and executes it using a custom seed, returning the resulting output.
            </summary>
            <param name="path">The path to the file to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.Do(Rant.RantProgram,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes the specified pattern and returns the resulting output.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.Do(Rant.RantProgram,System.Int64,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes the specified pattern using a custom seed and returns the resulting output.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.Do(Rant.RantProgram,Rant.RNG,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes the specified pattern using a custom random number generator and returns the resulting output.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(Rant.RantProgram,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(Rant.RantProgram,System.Int64,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The patten to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(Rant.RantProgram,Rant.RNG,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The pattero to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(System.String,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(System.String,System.Int64,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(System.String,Rant.RNG,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoName(System.String,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes a pattern that has been loaded from a package and returns the resulting output.
            </summary>
            <param name="patternName">The name of the pattern to execute.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoName(System.String,System.Int64,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes a pattern that has been loaded from a package and returns the resulting output.
            </summary>
            <param name="patternName">The name of the pattern to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoName(System.String,Rant.RNG,System.Int32,System.Double,Rant.RantProgramArgs)">
            <summary>
            Executes a pattern that has been loaded from a package using a custom random number generator and returns the resulting
            output.
            </summary>
            <param name="patternName">The name of the pattern to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">
            The maximum number of characters that can be printed. An exception will be thrown if the limit
            is exceeded. Set to zero or below for unlimited characters.
            </param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <param name="args">The arguments to pass to the pattern.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.RantRuntimeException">
            <summary>
            Represents a runtime error raised by the Rant engine.
            </summary>
        </member>
        <member name="P:Rant.RantRuntimeException.Line">
            <summary>
            The line on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.RantRuntimeException.Column">
            <summary>
            The column on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.RantRuntimeException.Index">
            <summary>
            The character index on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.RantRuntimeException.Code">
            <summary>
            The source of the error.
            </summary>
        </member>
        <member name="P:Rant.RantRuntimeException.RantStackTrace">
            <summary>
            The stack trace from the pattern.
            </summary>
        </member>
        <member name="M:Rant.RantRuntimeException.ToString">
            <summary>
            Returns a string representation of the runtime error, including the message and stack trace.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.RNG">
            <summary>
            Represents a non-linear random number generator.
            </summary>
        </member>
        <member name="M:Rant.RNG.#ctor(System.Int64)">
            <summary>
            Creates a new RNG instance with the specified seed.
            </summary>
            <param name="seed">The seed for the generator.</param>
        </member>
        <member name="M:Rant.RNG.#ctor(System.Int64,System.Int64)">
            <summary>
            Creates a new RNG instance with the specified seed and generation.
            </summary>
            <param name="seed">The seed for the generator.</param>
            <param name="generation">The generation to start at.</param>
        </member>
        <member name="M:Rant.RNG.#ctor">
            <summary>
            Creates a new RNG instance seeded with the system tick count.
            </summary>
        </member>
        <member name="P:Rant.RNG.BaseSeed">
            <summary>
            The root seed.
            </summary>
        </member>
        <member name="P:Rant.RNG.Seed">
            <summary>
            The seed of the top branch.
            </summary>
        </member>
        <member name="P:Rant.RNG.Generation">
            <summary>
            The current generation.
            </summary>
        </member>
        <member name="P:Rant.RNG.Item(System.Int32)">
            <summary>
            Calculates the raw 64-bit value for a given generation.
            </summary>
            <param name="g">The generation.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.RNG.Depth">
            <summary>
            The current branching depth of the generator.
            </summary>
        </member>
        <member name="M:Rant.RNG.GetRaw(System.Int64,System.Int64)">
            <summary>
            Calculates the raw 64-bit value for a given seed/generation pair.
            </summary>
            <param name="s">The seed.</param>
            <param name="g">The generation.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.NextRaw">
            <summary>
            Calculates the raw 64-bit value for the next generation, and increases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.PrevRaw">
            <summary>
            Calculates the raw 64-bit value for the previous generation, and decreases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Reset">
            <summary>
            Sets the current generation to zero.
            </summary>
        </member>
        <member name="M:Rant.RNG.Reset(System.Int64)">
            <summary>
            Sets the seed to the specified value and the current generation to zero.
            </summary>
            <param name="newSeed">The new seed to apply to the generator.</param>
        </member>
        <member name="M:Rant.RNG.Branch(System.Int64)">
            <summary>
            Creates a new branch based off the current seed and the specified seed.
            </summary>
            <param name="seed">The seed to create the branch with.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Merge">
            <summary>
            Removes the topmost branch and resumes generation on the next one down.
            </summary>
        </member>
        <member name="M:Rant.RNG.Peek">
            <summary>
            Calculates a 32-bit, non-negative integer for the current generation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.PeekAt(System.Int64)">
            <summary>
            Calculates the 32-bitnon-negative integer for the specified generation.
            </summary>
            <param name="generation">The generation to peek at.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.NextDouble">
            <summary>
            Returns a double-precision floating point number between 0 and 1, and advances the generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.NextDouble(System.Double)">
            <summary>
            Returns a double-precision floating point number between 0 and the specified maximum value, and advances the generation
            by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a double-precision floating point number between the specified minimum and maximum values, and advances the
            generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.NextBoolean">
            <summary>
            Returns a random boolean value and advances the generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Next">
            <summary>
            Calculates a 32-bit, non-negative integer from the next generation and increases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Prev">
            <summary>
            Calculates a 32-bit, non-negative integer from the previous generation and decreases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Next(System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound for the current generation and increases the current
            generation by 1.
            </summary>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Prev(System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound from the previous generation and decreases the
            current generation by 1.
            </summary>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Peek(System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound for the current generation.
            </summary>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.PeekAt(System.Int64,System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound for the specified generation.
            </summary>
            <param name="generation">The generation whose value to calculate.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Next(System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the current generation, and increases
            the current generation by 1.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Prev(System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the previous generation, and decreases
            the current generation by 1.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Peek(System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the current generation.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.PeekAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the specified generation.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <param name="generation">The generation whose value to calculate.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.RantProgram">
            <summary>
            Represents a compiled pattern that can be executed by the engine. It is recommended to use this class when running the
            same pattern multiple times.
            </summary>
        </member>
        <member name="P:Rant.RantProgram.Name">
            <summary>
            Gets or sets the name of the source code.
            </summary>
        </member>
        <member name="P:Rant.RantProgram.Type">
            <summary>
            Describes the origin of the program.
            </summary>
        </member>
        <member name="P:Rant.RantProgram.Code">
            <summary>
            The pattern from which the program was compiled.
            </summary>
        </member>
        <member name="M:Rant.RantProgram.CompileString(System.String)">
            <summary>
            Compiles a program from the specified pattern.
            </summary>
            <param name="code">The pattern to compile.</param>
            <exception cref="T:Rant.RantCompilerException">Thrown if a syntax error is encountered.</exception>
            <returns></returns>
        </member>
        <member name="M:Rant.RantProgram.CompileString(System.String,System.String)">
            <summary>
            Compiles a program from a pattern with the specified name.
            </summary>
            <param name="name">The name to give the source.</param>
            <param name="code">The pattern to compile.</param>
            <exception cref="T:Rant.RantCompilerException">Thrown if a syntax error is encountered.</exception>
            <returns></returns>
        </member>
        <member name="M:Rant.RantProgram.CompileFile(System.String)">
            <summary>
            Loads the file located at the specified path and compiles a program from its contents.
            </summary>
            <param name="path">The path to the file to load.</param>
            <exception cref="T:Rant.RantCompilerException">Thrown if a syntax error is encountered.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file cannot be found.</exception>
            <returns></returns>
        </member>
        <member name="M:Rant.RantProgram.SaveToFile(System.String)">
            <summary>
            Saves the compiled program to the file at the specified path.
            </summary>
            <param name="path">The path to save the program to.</param>
        </member>
        <member name="M:Rant.RantProgram.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the compiled program to the specified stream.
            </summary>
            <param name="stream">The stream to save the program to.</param>
        </member>
        <member name="M:Rant.RantProgram.LoadFile(System.String)">
            <summary>
            Loads a compiled Rant program from the file at the specified path.
            </summary>
            <param name="path">The path to load the program from.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantProgram.LoadStream(System.String,System.IO.Stream)">
            <summary>
            Loads a compiled Rant program from the specified stream.
            </summary>
            <param name="programName">The name to give to the program.</param>
            <param name="stream">The stream to load the program from.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantProgram.ToString">
            <summary>
            Returns a string describing the pattern.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.RantProgramOrigin">
            <summary>
            Indicates the manner in which a referenced code source was created.
            </summary>
        </member>
        <member name="F:Rant.RantProgramOrigin.File">
            <summary>
            Source was loaded from a file.
            </summary>
        </member>
        <member name="F:Rant.RantProgramOrigin.String">
            <summary>
            Source was loaded from a string.
            </summary>
        </member>
        <member name="T:Rant._">
            <summary>
            Makes tuples for your pleasure.
            </summary>
        </member>
        <member name="M:Rant._.Create``1(``0)">
            <summary>
            Makes Item1 1-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <param name="Item1">First value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``2(``0,``1)">
            <summary>
            Makes Item1 2-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``3(``0,``1,``2)">
            <summary>
            Makes Item1 3-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``4(``0,``1,``2,``3)">
            <summary>
            Makes Item1 4-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <param name="Item4">Fourth value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``5(``0,``1,``2,``3,``4)">
            <summary>
            Makes Item1 5-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <param name="Item4">Fourth value.</param>
            <param name="Item5">Fifth value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Makes Item1 6-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <param name="Item4">Fourth value.</param>
            <param name="Item5">Fifth value.</param>
            <param name="Item6">Sixth value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Makes Item1 7-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
            <typeparam name="G">Seventh type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <param name="Item4">Fourth value.</param>
            <param name="Item5">Fifth value.</param>
            <param name="Item6">Sixth value.</param>
            <param name="Item7">Seventh value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Makes an 8-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
            <typeparam name="G">Seventh type.</typeparam>
            <typeparam name="H">Eighth type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <param name="Item4">Fourth value.</param>
            <param name="Item5">Fifth value.</param>
            <param name="Item6">Sixth value.</param>
            <param name="Item7">Seventh value.</param>
            <param name="Item8">Eighth value.</param>
            <returns></returns>
        </member>
    </members>
</doc>
